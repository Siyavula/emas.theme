// Generated by CoffeeScript 1.2.1-pre
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

Annotator.Plugin.Comment = (function(_super) {

  __extends(Comment, _super);

  Comment.name = 'Comment';

  Comment.prototype.events = {
    'annotationViewerShown': 'addReplyButton',
    '.annotator-reply click': 'onReplyClick',
    '.annotator-save click': 'onReplyEntryClick',
    '.annotator-cancel click': 'hide',
    '.replyentry keydown': 'processKeypress',
    '.replyentry click': 'processKeypress'
  };

  function Comment(element) {
    this.processKeypress = __bind(this.processKeypress, this);
    Comment.__super__.constructor.apply(this, arguments);
  }

  Comment.prototype.pluginInit = function() {
    if (!Annotator.supported()) {}
  };

  Comment.prototype.addReplyButton = function(viewer, annotations) {
    var annotator_listing, i, l, replies, reply, replylist, _i, _j, _len, _len1;
    annotator_listing = this.annotator.element.find('.annotator-annotation.annotator-item');
    for (i = _i = 0, _len = annotator_listing.length; _i < _len; i = ++_i) {
      l = annotator_listing[i];
      l = $(l);
      if (annotations[i].replies != null) {
        replies = annotations[i].replies;
        l.append('<div style=\'padding:5px\'> <span> Replies </span></div>\n  <div id="Replies">\n\n<li class="Replies">\n</li></div>');
        if (replies.length > 0) {
          replylist = this.annotator.element.find('.Replies');
          for (_j = 0, _len1 = replies.length; _j < _len1; _j++) {
            reply = replies[_j];
            $(replylist[i]).append('<div class=\'reply\'>\n<span class=\'replyuser\'>' + reply.user + '</span>\n<div class=\'replytext\'>' + reply.reply + '</div></div>');
          }
        }
      }
      l.append('<div class=\'replybox\'>\n<textarea class="replyentry" placeholder="Reply to this annotation..."></textarea>');
    }
    return viewer.checkOrientation();
  };

  Comment.prototype.onReplyClick = function(event) {
    var item, textarea, viewer;
    item = $(event.target).parents('.annotator-annotation');
    viewer = this.annotator.element.find('.annotator-annotation.annotator-item');
    textarea = item.find('.replyentry');
    if (textarea.length === 0) {
      return item.append('<div class=\'replybox\'><label> Reply to this annotation </label> \n<br/> \n<textarea class="replyentry" rows="6" cols="40"> </textarea>\n<br/>\n<div class="annotator-controls">\n<a href="#save" class="annotator-reply-entry">Reply</a>\n</div>\n</div>');
    }
  };

  Comment.prototype.onReplyEntryClick = function(event) {
    var annotation, item, reply, replyObject, textarea;
    item = $(event.target).parent().parent();
    textarea = item.find('.replyentry');
    reply = textarea.val();
    if (reply !== '') {
      replyObject = this.getReplyObject();
      console.log(this.annotator.plugins.Permissions);
      if (this.annotator.plugins.Permissions.user) {
        replyObject.user = this.annotator.plugins.Permissions.user.name;
      } else {
        replyObject.user = "Anonymous";
      }
      replyObject.reply = reply;
      item = $(event.target).parents('.annotator-annotation');
      annotation = item.data('annotation');
      if (!(annotation.replies != null)) annotation.replies = [];
      annotation.replies.push(replyObject);
      this.publish('annotationUpdated', [annotation]);
      return this.annotator.viewer.hide();
    }
  };

  Comment.prototype.showReplies = function(event) {
    var annotation, item, reply, replylist, viewer, _i, _len, _ref, _results;
    viewer = this.annotator.element.find('.annotator-annotation.annotator-item');
    replylist = viewer.find('.Replies');
    item = $(event.target).parents('.annotator-annotation');
    annotation = item.data('annotation');
    if (replylist.length === 0) {
      viewer.append('<div id="Replies">\n<li class="Replies">\n</li></div>');
    }
    replylist = viewer.find('.Replies');
    if (replylist.children().length === 0) {
      _ref = annotation.replies;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        reply = _ref[_i];
        _results.push(replylist.append('<div class=\'reply\'>\n<span class=\'replyuser\'>' + reply.user + '</span>\n<div class=\'replytext\'>' + reply.reply + '</div></div>'));
      }
      return _results;
    }
  };

  Comment.prototype.getReplyObject = function() {
    var replyObject;
    replyObject = {
      user: "anonymous",
      reply: ""
    };
    return replyObject;
  };

  Comment.prototype.processKeypress = function(event) {
    var controls, item;
    item = $(event.target).parent();
    controls = item.find('.annotator-reply-controls');
    if (controls.length === 0) {
      item.append('<div class="annotator-reply-controls">\n<a href="#save" class="annotator-save">Save</a>\n<a href="#cancel" class="annotator-cancel">Cancel</a>\n</div>\n</div>');
      this.annotator.viewer.checkOrientation();
    }
    if (event.keyCode === 27) {
      return this.annotator.viewer.hide();
    } else if (event.keyCode === 13 && !event.shiftKey) {
      return this.onReplyEntryClick(event);
    }
  };

  Comment.prototype.hide = function() {
    return this.annotator.viewer.hide();
  };

  return Comment;

})(Annotator.Plugin);
